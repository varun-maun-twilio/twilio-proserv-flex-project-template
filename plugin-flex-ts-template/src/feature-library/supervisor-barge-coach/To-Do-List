// Summary Notes:
Migrated Sync service, added to util/sync folder - I have all advanced features on now.  First test did not render anything in the UI on the agent side.  Need to see why, confirm sync is updated, agent is subscribing but maybe a react/render issue?  That's what is up next!

What's Done:
-Added an advantaged feature flag to flex-config the extra add-ons
-Update Package version to match Jared's latest updates
-Confirm refresh/cache clean up for button state is working properly
-Work on merging Function code (and merged it from two functions to one :))
-Test simple barge/coach where redux update the icons properly (with a listerner!)
-We've registered Redux properly!
-Migrated state folder (with a few //FIXMEs, see below)
-Work on organzing Components
-Added Barge/Coach Features to Flex-hooks/components to add components in
-Add "Enable" feature flag logic for Supervisor Barge Coach
--Enabled Standard/Advanced toggled in flex-hooks/components to allow me to control features as I roll them out
--Required adding it to types/manager/ServiceConfiguration.ts & flex-config and all the dev - prod json files (setting those to true vs false)

Whats Next:
-Work on Sync
-Work on Coaching Panel, Supervisor Privacy Panel

// Future Features
-Possibly add a refresh util to detect refresh and recover (instead of being in the Task.OverviewCanvas file)
-Possibly enable/disable advanced features via feature flag (IE coaching panel, private panel, and supervisors monitoring panel)
--I've done this via the flex-hooks/components folder within the barge coach feature directory, but this may need to be moved, will consult with jared on that


DEVELOPMENT NOTES:
-Redux, oh redux...
    -You need to update ..\src\flex-hooks\states\index.ts with your custom redux/reducers
    -Mimic the .src\feature-library\xxxx\states\XXXX\directory
        -initialState (if applicable)
        -reducer.ts
        -types.ts
        -index.ts
        -actions.ts
-When Adding the components:
    -Update all the ui_attributes.jsons (dev - prod)
    -Add your component under .src\feature-library\xxxx\flex-hooks\components\xxxx.ts
    -Update the appropriate component within .src\flex-hooks\components\
        -This includes adding the import and updating the function to call it
-One roadblock was forgetting the connector in my container component file, I've fixed this but making a note for the future
-Functions
    -Need to get clarity on how best to leverage functions, should it start as a custom feature util and possibly migrate to a standard function util?
-Feature Enable
    -If you get undefined when reading the "enabled" feature flag within your own feather, make sure you have the dev - prod ui attributes set properly and you ran the npm run deploy:dev command unde flex-configs directory